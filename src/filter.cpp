/* ================================================================================================================= */
/* [INCL] Includes                                                                                                   */
/* ================================================================================================================= */
/* ----------------------------------  Standard  ------------------------------------------------------------------- */
#include <stdint.h>
/* ------------------------------------  SDK  ---------------------------------------------------------------------- */

/* -----------------------------------  Plejd  --------------------------------------------------------------------- */

/* -----------------------------------  Local  --------------------------------------------------------------------- */
#include "filter.h"

/* ================================================================================================================= */
/* [DEFS] Defines                                                                                                    */
/* ================================================================================================================= */

/* ================================================================================================================= */
/* [TYPE] Type definitions                                                                                           */
/* ================================================================================================================= */

/* ================================================================================================================= */
/* [GLOB] Global variables                                                                                           */
/* ================================================================================================================= */

/* ================================================================================================================= */
/* [PFDE] Private functions declaration                                                                              */
/* ================================================================================================================= */

/* ================================================================================================================= */
/* [PFUN] Private functions implementations                                                                          */
/* ================================================================================================================= */

/* ================================================================================================================= */
/* [FUNC] Functions implementations                                                                                  */
/* ================================================================================================================= */
/**
 * @brief Initialize low pass filter
 *
 * The filter time constant is tau = t_sampling_rate * 2^shift.
 * or shift = log_2(tau / t_sampling_rate) if desired time constant and sampling rate is determind
 * E.g Sample a sine wave 50Hz with 20 samples per period and a shift = 10 => t_sampling_rate = 1 / (50*20)
 *     Then the time constant of the filter is tau = 1s.
 *
 * @param f Pointer to filter struct (filter_lp_t)
 * @param initial_value Initial value
 * @param shift Shift constant
 */
void filter_lp_init(filter_lp_t* f, int initial_value, uint8_t shift) {
    f->shift = shift;
    f->rounding = 1 << (shift - 1);
    f->value = initial_value << shift;
}

/**
 * @brief Low pass filter update optimized for integer math
 *
 * @param f Pointer to filter struct (filter_lp_t)
 * @param sample New sample
 * @return int New filter output
 */
int filter_lp_update(filter_lp_t* f, int sample) {
    f->value += sample - filter_lp_get(f);
    return filter_lp_get(f);
}

/**
 * @brief Get current low pass filter value
 *
 * @param f Pointer to filter struct (filter_lp_t)
 * @return int Current filter output
 */
int filter_lp_get(filter_lp_t* f) {
    return (f->value + f->rounding) >> f->shift;
}

/* ================================================================================================================= */
/* [INTR] Interrupts                                                                                                 */
/* ================================================================================================================= */
